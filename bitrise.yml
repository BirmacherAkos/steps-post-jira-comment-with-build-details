format_version: 5
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BITRISE_STEP_ID: post-jira-comment
  - BITRISE_STEP_VERSION: "0.9.0"
  - BITRISE_STEP_GIT_CLONE_URL: https://github.com/bitrise-steplib/steps-post-jira-comment-with-build-details
  - MY_bitrise-steplib_REPO_FORK_GIT_URL: $MY_bitrise-steplib_REPO_FORK_GIT_URL

  - BITRISE_JIRA_USER_NAME: $BITRISE_JIRA_USER_NAME
  - BITRISE_JIRA_API_TOKEN: $BITRISE_JIRA_API_TOKEN
  - BITRISE_JIRA_BASE_URL: $BITRISE_JIRA_BASE_URL
  - BITRISE_JIRA_ISSUE_KEYS: $BITRISE_JIRA_ISSUE_KEYS

workflows:
  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update

  go-test:
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            go get -u github.com/kisielk/errcheck
            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            go get -u github.com/golang/lint/golint
            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            go test $(go list ./... | grep -v vendor)

  ci:
    title: Bitrise CI
    description: |
      1, Git clone bitrise repo and install testing tools
      2, Run tests
      3, Announce test result
    before_run:
    - _prepare-and-setup
    - test
    steps:
    - slack:
        title: Slack notifications
        run_if: ".IsCI"
        inputs:
        - webhook_url: "$INTERNAL_DEV_SLACK_WEBHOOK_URL"
        - channel: "$INTERNAL_DEV_LIFELINE_SLACK_CHANNEL"
        - from_username: "${BIN_NAME} - CI - OK"
        - from_username_on_error: "${BIN_NAME} - CI - ERROR"
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}

  test:
    steps:
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - path::./:
        title: Step Test
        inputs:
        - jira_user_name: ${BITRISE_JIRA_USER_NAME}
        - jira_api_token: ${BITRISE_JIRA_API_TOKEN}
        - jira_issue_keys: ${BITRISE_JIRA_ISSUE_KEYS}
        - jira_base_url: ${BITRISE_JIRA_BASE_URL}
        - comment: ${COMMENT}


  _prepare-and-setup:
    title: Prepare bitrise and install testing tools
    description: |
        Prepares the environment for testing
    steps:
    - script:
        is_skippable: true
        inputs:
        - content: brew update
    - script:
        title: Install testing tools
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            # Check for unhandled errors
            go get -u -v github.com/kisielk/errcheck

            # Go lint
            go get -u -v github.com/golang/lint/golint

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a bitrise-steplib
      - MY_bitrise-steplib_REPO_FORK_GIT_URL: $MY_bitrise-steplib_REPO_FORK_GIT_URL
      - BITRISE_STEP_ID: $BITRISE_STEP_ID
      - BITRISE_STEP_VERSION: $BITRISE_STEP_VERSION
      - BITRISE_STEP_GIT_CLONE_URL: $BITRISE_STEP_GIT_CLONE_URL
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      bitrise-steplib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_bitrise-steplib_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `BITRISE_STEP_ID` and `BITRISE_STEP_VERSION`
      environments are set to the desired values!

      To share this Step into a bitrise-steplib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c "${MY_bitrise-steplib_REPO_FORK_GIT_URL}"
            bitrise share create --stepid "${BITRISE_STEP_ID}" --tag "${BITRISE_STEP_VERSION}" --git "${BITRISE_STEP_GIT_CLONE_URL}"
            bitrise share finish
